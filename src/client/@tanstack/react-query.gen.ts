// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '../client';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { UploadFileData, UploadFileError, UploadFileResponse, AddPetData, UpdatePetData, FindPetsByStatusData, FindPetsByTagsData, GetPetByIdData, UpdatePetWithFormData, DeletePetData, PlaceOrderData, PlaceOrderError, PlaceOrderResponse, GetOrderByIdData, DeleteOrderData, CreateUsersWithListInputData, CreateUsersWithListInputError, CreateUsersWithListInputResponse, GetUserByNameData, UpdateUserData, DeleteUserData, LoginUserData, CreateUsersWithArrayInputData, CreateUsersWithArrayInputError, CreateUsersWithArrayInputResponse, CreateUserData, CreateUserError, CreateUserResponse } from '../types.gen';
import { client, uploadFile, addPet, updatePet, findPetsByStatus, findPetsByTags, getPetById, updatePetWithForm, deletePet, getInventory, placeOrder, getOrderById, deleteOrder, createUsersWithListInput, getUserByName, updateUser, deleteUser, loginUser, logoutUser, createUsersWithArrayInput, createUser } from '../sdk.gen';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const uploadFileQueryKey = (options: OptionsLegacyParser<UploadFileData>) => [
    createQueryKey('uploadFile', options)
];

export const uploadFileOptions = (options: OptionsLegacyParser<UploadFileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadFile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadFileQueryKey(options)
    });
};

export const uploadFileMutation = (options?: Partial<OptionsLegacyParser<UploadFileData>>) => {
    const mutationOptions: UseMutationOptions<UploadFileResponse, UploadFileError, OptionsLegacyParser<UploadFileData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadFile({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addPetQueryKey = (options: OptionsLegacyParser<AddPetData>) => [
    createQueryKey('addPet', options)
];

export const addPetOptions = (options: OptionsLegacyParser<AddPetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addPet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addPetQueryKey(options)
    });
};

export const addPetMutation = (options?: Partial<OptionsLegacyParser<AddPetData>>) => {
    const mutationOptions: UseMutationOptions<void, DefaultError, OptionsLegacyParser<AddPetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addPet({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updatePetMutation = (options?: Partial<OptionsLegacyParser<UpdatePetData>>) => {
    const mutationOptions: UseMutationOptions<void, DefaultError, OptionsLegacyParser<UpdatePetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updatePet({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findPetsByStatusQueryKey = (options: OptionsLegacyParser<FindPetsByStatusData>) => [
    createQueryKey('findPetsByStatus', options)
];

export const findPetsByStatusOptions = (options: OptionsLegacyParser<FindPetsByStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findPetsByStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findPetsByStatusQueryKey(options)
    });
};

export const findPetsByTagsQueryKey = (options: OptionsLegacyParser<FindPetsByTagsData>) => [
    createQueryKey('findPetsByTags', options)
];

export const findPetsByTagsOptions = (options: OptionsLegacyParser<FindPetsByTagsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findPetsByTags({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findPetsByTagsQueryKey(options)
    });
};

export const getPetByIdQueryKey = (options: OptionsLegacyParser<GetPetByIdData>) => [
    createQueryKey('getPetById', options)
];

export const getPetByIdOptions = (options: OptionsLegacyParser<GetPetByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPetById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPetByIdQueryKey(options)
    });
};

export const updatePetWithFormQueryKey = (options: OptionsLegacyParser<UpdatePetWithFormData>) => [
    createQueryKey('updatePetWithForm', options)
];

export const updatePetWithFormOptions = (options: OptionsLegacyParser<UpdatePetWithFormData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updatePetWithForm({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updatePetWithFormQueryKey(options)
    });
};

export const updatePetWithFormMutation = (options?: Partial<OptionsLegacyParser<UpdatePetWithFormData>>) => {
    const mutationOptions: UseMutationOptions<void, DefaultError, OptionsLegacyParser<UpdatePetWithFormData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updatePetWithForm({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deletePetMutation = (options?: Partial<OptionsLegacyParser<DeletePetData>>) => {
    const mutationOptions: UseMutationOptions<void, DefaultError, OptionsLegacyParser<DeletePetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deletePet({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getInventoryQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getInventory', options)
];

export const getInventoryOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getInventory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getInventoryQueryKey(options)
    });
};

export const placeOrderQueryKey = (options: OptionsLegacyParser<PlaceOrderData>) => [
    createQueryKey('placeOrder', options)
];

export const placeOrderOptions = (options: OptionsLegacyParser<PlaceOrderData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await placeOrder({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: placeOrderQueryKey(options)
    });
};

export const placeOrderMutation = (options?: Partial<OptionsLegacyParser<PlaceOrderData>>) => {
    const mutationOptions: UseMutationOptions<PlaceOrderResponse, PlaceOrderError, OptionsLegacyParser<PlaceOrderData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await placeOrder({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrderByIdQueryKey = (options: OptionsLegacyParser<GetOrderByIdData>) => [
    createQueryKey('getOrderById', options)
];

export const getOrderByIdOptions = (options: OptionsLegacyParser<GetOrderByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrderById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrderByIdQueryKey(options)
    });
};

export const deleteOrderMutation = (options?: Partial<OptionsLegacyParser<DeleteOrderData>>) => {
    const mutationOptions: UseMutationOptions<void, DefaultError, OptionsLegacyParser<DeleteOrderData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteOrder({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createUsersWithListInputQueryKey = (options: OptionsLegacyParser<CreateUsersWithListInputData>) => [
    createQueryKey('createUsersWithListInput', options)
];

export const createUsersWithListInputOptions = (options: OptionsLegacyParser<CreateUsersWithListInputData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUsersWithListInput({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUsersWithListInputQueryKey(options)
    });
};

export const createUsersWithListInputMutation = (options?: Partial<OptionsLegacyParser<CreateUsersWithListInputData>>) => {
    const mutationOptions: UseMutationOptions<CreateUsersWithListInputResponse, CreateUsersWithListInputError, OptionsLegacyParser<CreateUsersWithListInputData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUsersWithListInput({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserByNameQueryKey = (options: OptionsLegacyParser<GetUserByNameData>) => [
    createQueryKey('getUserByName', options)
];

export const getUserByNameOptions = (options: OptionsLegacyParser<GetUserByNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserByName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserByNameQueryKey(options)
    });
};

export const updateUserMutation = (options?: Partial<OptionsLegacyParser<UpdateUserData>>) => {
    const mutationOptions: UseMutationOptions<void, DefaultError, OptionsLegacyParser<UpdateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteUserMutation = (options?: Partial<OptionsLegacyParser<DeleteUserData>>) => {
    const mutationOptions: UseMutationOptions<void, DefaultError, OptionsLegacyParser<DeleteUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginUserQueryKey = (options: OptionsLegacyParser<LoginUserData>) => [
    createQueryKey('loginUser', options)
];

export const loginUserOptions = (options: OptionsLegacyParser<LoginUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginUserQueryKey(options)
    });
};

export const logoutUserQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('logoutUser', options)
];

export const logoutUserOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await logoutUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: logoutUserQueryKey(options)
    });
};

export const createUsersWithArrayInputQueryKey = (options: OptionsLegacyParser<CreateUsersWithArrayInputData>) => [
    createQueryKey('createUsersWithArrayInput', options)
];

export const createUsersWithArrayInputOptions = (options: OptionsLegacyParser<CreateUsersWithArrayInputData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUsersWithArrayInput({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUsersWithArrayInputQueryKey(options)
    });
};

export const createUsersWithArrayInputMutation = (options?: Partial<OptionsLegacyParser<CreateUsersWithArrayInputData>>) => {
    const mutationOptions: UseMutationOptions<CreateUsersWithArrayInputResponse, CreateUsersWithArrayInputError, OptionsLegacyParser<CreateUsersWithArrayInputData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUsersWithArrayInput({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createUserQueryKey = (options: OptionsLegacyParser<CreateUserData>) => [
    createQueryKey('createUser', options)
];

export const createUserOptions = (options: OptionsLegacyParser<CreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUserQueryKey(options)
    });
};

export const createUserMutation = (options?: Partial<OptionsLegacyParser<CreateUserData>>) => {
    const mutationOptions: UseMutationOptions<CreateUserResponse, CreateUserError, OptionsLegacyParser<CreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};