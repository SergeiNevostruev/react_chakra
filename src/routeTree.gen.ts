/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const demoIndexLazyImport = createFileRoute('/(demo)/')()
const demoReducerLazyImport = createFileRoute('/(demo)/reducer')()
const demoAboutLazyImport = createFileRoute('/(demo)/about')()

// Create/Update Routes

const demoIndexLazyRoute = demoIndexLazyImport
  .update({
    id: '/(demo)/',
    path: '/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(demo)/index.lazy').then((d) => d.Route))

const demoReducerLazyRoute = demoReducerLazyImport
  .update({
    id: '/(demo)/reducer',
    path: '/reducer',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(demo)/reducer.lazy').then((d) => d.Route))

const demoAboutLazyRoute = demoAboutLazyImport
  .update({
    id: '/(demo)/about',
    path: '/about',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(demo)/about.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(demo)/about': {
      id: '/(demo)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof demoAboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/(demo)/reducer': {
      id: '/(demo)/reducer'
      path: '/reducer'
      fullPath: '/reducer'
      preLoaderRoute: typeof demoReducerLazyImport
      parentRoute: typeof rootRoute
    }
    '/(demo)/': {
      id: '/(demo)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof demoIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/about': typeof demoAboutLazyRoute
  '/reducer': typeof demoReducerLazyRoute
  '/': typeof demoIndexLazyRoute
}

export interface FileRoutesByTo {
  '/about': typeof demoAboutLazyRoute
  '/reducer': typeof demoReducerLazyRoute
  '/': typeof demoIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(demo)/about': typeof demoAboutLazyRoute
  '/(demo)/reducer': typeof demoReducerLazyRoute
  '/(demo)/': typeof demoIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/about' | '/reducer' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/reducer' | '/'
  id: '__root__' | '/(demo)/about' | '/(demo)/reducer' | '/(demo)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  demoAboutLazyRoute: typeof demoAboutLazyRoute
  demoReducerLazyRoute: typeof demoReducerLazyRoute
  demoIndexLazyRoute: typeof demoIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  demoAboutLazyRoute: demoAboutLazyRoute,
  demoReducerLazyRoute: demoReducerLazyRoute,
  demoIndexLazyRoute: demoIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(demo)/about",
        "/(demo)/reducer",
        "/(demo)/"
      ]
    },
    "/(demo)/about": {
      "filePath": "(demo)/about.lazy.tsx"
    },
    "/(demo)/reducer": {
      "filePath": "(demo)/reducer.lazy.tsx"
    },
    "/(demo)/": {
      "filePath": "(demo)/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
